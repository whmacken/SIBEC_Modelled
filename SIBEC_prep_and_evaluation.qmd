---
title: "Evaluation of SIBEC data"
author: "William H MacKenzie"
format: html
---

# Evaluation of SIBEC values
This script was built to look at the range of site index by site series or other site factors for the SIBEC dataset compiled by Atticus from the original data sets.

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
#options(tinytex.verbose = TRUE)
require(tidyverse)
#require (ggplot2)
require (assertr)
require(data.table)
require(climr)
require(DBI)
library(purrr)
require(tictoc)
```

##Import Vtrees data

Read in SIBEC data from a .csv table export of a _Trees table from the VTrees database

```{r Vtrees data import}
sibec_master <- dbConnect(odbc::odbc(), .connection_string = "Driver={Microsoft Access Driver (*.mdb, *.accdb)}; DBQ=D:/OneDrive - Government of BC/SIBEC_files/SIBEC_2024_Prov_VPRO_Master.accdb;")
sibec  <- dbReadTable(sibec_master, "SIBEC_All_2024_ENV")
sibec.tree  <- dbReadTable(sibec_master, "SIBEC_All_2024_Trees")
sibec.info  <- dbReadTable(sibec_master, "SIBEC_All_2024_TreePlot")
#SI_raw  <- dbReadTable(sibec_master, "SIBEC_Analysis_Data")
dbDisconnect(sibec_master)
xx <- unique(sibec.tree$TreeSpp)
sibec.anal <- merge(sibec.tree, sibec.info, by = c("PlotNumber")) 
sibec.anal <- merge(sibec.anal, sibec, by = c("PlotNumber")) %>% mutate(BGC = sub("/.*", "", BECSiteUnit), Zone = gsub("[^A-Z]", "", BECSiteUnit)) %>%
  mutate(SI50 = ifelse(Zone %in% c("CWH", "MH", "CDF"), SiteIndex25_coast, SiteIndex25_interior)) %>%
  select(PlotNumber, TreeSpp, TreeNum, CountAge, TotalHtCalc, Zone, BGC, BECSiteUnit, MoistureRegime, NutrientRegime, Latitude, Longitude, Elevation, SI50) %>% drop_na() %>% 
  mutate(rSNR = gsub("[+-]", "", NutrientRegime))
sibec.anal <- sibec.anal %>% mutate(rSNRg = ifelse(NutrientRegime %in% c("A", "B"), "P",
                                            ifelse(NutrientRegime %in% c("D", "E"), "R",
                                                 ifelse (NutrientRegime %in% c("C"), "PM", "other"))))
sibec.anal <- sibec.anal %>% mutate(eda1 = paste0(MoistureRegime, rSNRg))
sibec.anal <- sibec.anal  %>%  mutate(rSMR = as.numeric(gsub("[+-]", "", MoistureRegime))) %>% mutate(rSMR_label = paste0("rSMR", MoistureRegime))

fwrite(sibec.anal, "./data/SIBEC_Analysis_data_2025.csv")
```


```{r add climate and aSMR import}
## add in climate data and calculate aSMR
sibec.climate <- sibec.anal %>% as_tibble() %>% arrange(PlotNumber) %>% mutate(id = row_number())
my_points <- sibec.climate %>% select(lat = Latitude, lon=Longitude, elev = Elevation, id) %>% na.omit

tic()
#cache_clear()
clim_dat <- downscale(
  xyz = my_points, which_refmap = "auto", 
 vars=list_vars())
toc()
sibec.anal2 <- clim_dat %>% left_join(sibec.climate)
sPPTtemp <- sibec.anal2 %>% select("id", "PPT_05","PPT_06","PPT_07","PPT_08","PPT_09" )
sibec.anal2$Moist <- rowSums(sPPTtemp[,2:6] >90)
sibec.anal2 <- sibec.anal2 %>% mutate(CMD = ifelse(Moist >4, CMD * 0.75, CMD))

#temp2 <- temp2[temp2$Moist != "",] # only those points calculated to be moist
#####################################
#sibec.anal2 <- sibec.anal2[,c("id","PPT_at","PPT_wt","PAS", "CMD", "DD5")]
#allDat2 <- cbind(wPPTtemp,CMDtemp)
#allDat <- cbind(wPPTtemp,sPPTtemp[c("Moist")])
#allDat <- cbind(allDat,temp,temp2) ### use this one if Moist indicator is completed above
sibec.anal2$PPT.dorm <- sibec.anal2$PPT_at + sibec.anal2$PPT_wt
sibec.anal2$Def <- 350 - sibec.anal2$PPT.dorm 
sibec.anal2$Def[sibec.anal2$Def < 0] <- 0 #negative values set to zero = no deficit
sibec.anal2$CMD <- sibec.anal2$CMD + sibec.anal2$Def
sibec.anal3 <- sibec.anal2 %>% select(id, CMD, DD5)
sibec.anal3 <- left_join(sibec.anal3, sibec.climate, by = "id")
# convert CMD to aSMR
sibec.anal3 <- sibec.anal3 %>% mutate(CMD.adj = ifelse(rSMR == 3, CMD + 125, 
                                                  ifelse(rSMR == 2, CMD + 250,
                                                         ifelse(rSMR == 1, CMD + 375,
                                                                ifelse(rSMR == 0, CMD + 500,
                                                                       ifelse(rSMR == 5, CMD/2,
                                                                              ifelse(rSMR == 6, CMD/4,
                                                                                     ifelse(rSMR == 7, CMD/8,
                                                                                            ifelse(rSMR == 4, CMD, NA)))))))))%>% 
  mutate(CMD.adj = ifelse(CMD.adj < 0, 0, CMD.adj))

# Read the rules table
rules_table <- fread("../aSMR_X_rSMR/inputs/aSMR_Rules_HalfStep_v13_7May2025.csv")
labels <- fread("../aSMR_X_rSMR/inputs/aSMR_labels.csv")

# Ensure column names are consistent
colnames(rules_table) <- c("SMRLevel", "CMD.range", "aSMR")
#sibec.anal.test <- sibec.anal2 %>% filter(PlotNumber == "0002801") %>% filter(TreeSpp == "Ss")
# Merge with sibec.anal based on the rSMR field
sibec.anal4 <- sibec.anal3 %>%
  left_join(rules_table, by = c("rSMR" = "SMRLevel")) %>%  filter(CMD.range <= CMD.adj) %>%  group_by(PlotNumber) %>% slice_max(CMD.range) %>% ungroup() %>% 
  select(-CMD, -CMD.range) %>% data.frame %>% left_join(labels, by = c("aSMR" = "aSMR")) 
sibec.anal4 <- sibec.anal4 %>% mutate(eda2 = paste0(aSMR_label, '/', rSNRg))
fwrite(sibec.anal4, "./data/SIBEC_Analysis_data_2025.csv")

```
```{r}
# Load necessary library
library(dplyr)

# Function to calculate Heat Load Index (HLI)
calculate_hli <- function(aspect) {
  (1 - cos((aspect - 45) * pi / 180)) / 2  # Convert degrees to radians
}

# Example dataset with Aspect values
terrain_data <- data.frame(
  PlotNumber = 1:10,
  Aspect = c(0, 45, 90, 135, 180, 225, 270, 315, 360, 30)  # Degrees (East of North)
)

# Apply HLI calculation
terrain_data <- terrain_data %>%
  mutate(HLI = calculate_hli(Aspect))

# Print results
print(terrain_data)
```


## Generate boxplots of site index by site series with phases
This produces a facetted boxplot graph for each species in a BGC showing site index by site series

```{r boxplot species by rSMRxSNR}
SI_spp <- sibec.anal4 %>% arrange(BGC)#%>% filter(grepl("^SBSmc2", BECSiteUnit))
SI_spp <- drop_na (SI_spp)
# Create separate plots for each BGC
unique_bgcs <- sort(unique(SI_spp$BGC))
#unique_bgcs = "ICHmc2"
for (bgc in unique_bgcs) {
  # Filter data for the current BGC
  SI_spp_subset <- SI_spp %>% filter(BGC == bgc)
  
  # Create the plot
SI_plot <- ggplot(SI_spp_subset, aes(x=eda1, y=SI50, fill=rSNRg)) +
  geom_boxplot() +
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 8,angle = 90, hjust = 1, vjust = 0.5),
    panel.grid.major.x = element_blank(),
    panel.grid.major.y = element_line(color = "gray80")
  ) +
  ggtitle(paste0("Site Index by edaphic position ", bgc)) +
  facet_wrap(~TreeSpp)
  plot(SI_plot)
  # Save the plot
  #ggsave(filename = paste0("./outputs/SiteIndex_", bgc, "_rSMR.png"), plot = SI_plot, width = 8, height = 6)
}

```

```{r boxplot species by aSMRxSNR}
SI_spp <- sibec.anal4 %>% arrange(BGC)#%>% filter(grepl("^SBSmc2", BECSiteUnit))
SI_spp <- drop_na (SI_spp)
# Create separate plots for each BGC
unique_bgcs <- sort(unique(SI_spp$BGC))
#unique_bgcs = "ICHmc2"
for (bgc in unique_bgcs) {
  # Filter data for the current BGC
SI_spp_subset <- SI_spp_subset %>%
  arrange(label_order) %>%  # Sort data by label_order
  mutate(eda2 = factor(eda2, levels = unique(eda2[order(label_order)])))
  
  # Create the plot
SI_plot <- ggplot(SI_spp_subset, aes(x=eda2, y=SI50, fill=rSNRg)) +
  geom_boxplot() +
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 8,angle = 90, hjust = 1, vjust = 0.5),
    panel.grid.major.x = element_blank(),
    panel.grid.major.y = element_line(color = "gray80")
  ) +
  ggtitle(paste0("Site Index by edaphic position ", bgc)) +
  facet_wrap(~TreeSpp)
  plot(SI_plot)
  # Save the plot
  #ggsave(filename = paste0("./outputs/SiteIndex_", bgc, "_rSMR.png"), plot = SI_plot, width = 8, height = 6)
}

```

```{r boxplot species by aSMRxSNR}
SI_spp <- sibec.anal2 %>% arrange(BGC)#%>% filter(grepl("^SBSmc2", BECSiteUnit))
SI_spp <- drop_na (SI_spp)
# Create separate plots for each BGC
unique_bgcs <- sort(unique(SI_spp$BGC))
unique_bgcs = "ICHmc2"
for (bgc in unique_bgcs) {
  # Filter data for the current BGC
SI_spp_subset <- SI_spp_subset %>%
  arrange(label_order) %>%  # Sort data by label_order
  mutate(eda2 = factor(eda2, levels = unique(eda2[order(label_order)])))  # Order factor levels

# Create the plot
SI_plot <- ggplot(SI_spp_subset, aes(x=eda2, y=SI50, fill=rSNRg)) +
  geom_boxplot() +
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 8, angle = 90, hjust = 1, vjust = 0.5),  # Rotate x labels
    panel.grid.major.x = element_blank(),
    panel.grid.major.y = element_line(color = "gray80")
  ) +
  ggtitle(paste0("Site Index by edaphic position ", bgc)) +
  facet_wrap(~TreeSpp)

  plot(SI_plot)
  # Save the plot
  ggsave(filename = paste0("./outputs/SiteIndex_", bgc, "_aSMR.png"), plot = SI_plot, width = 8, height = 6)
}
```

## Linear regression models
```{r}
# Load necessary package
library(dplyr)
sibec.lm <- sibec.anal4 %>%
  mutate(SNR = as.numeric(factor(rSNR, levels = c("A", "B", "C", "D", "E"), ordered = TRUE)))
# Ensure variables are numeric (if needed)
sibec.lm <- sibec.lm %>%
  mutate(
    DD5 = as.numeric(DD5),
    CMD.adj = as.numeric(CMD.adj),
    Zone = as.factor(Zone)
  )
#sibec.lm = sibec.lm %>% filter(Zone %in% c("CWH", "MH")) %>% droplevels
models_list <- sibec.lm %>%
  group_by(TreeSpp) %>%
  drop_na() %>%
  group_split(TreeSpp) %>%
  setNames(unique(sibec.lm$TreeSpp)) %>%
  lapply(function(df) {
    # Check if any predictor has only one unique value
    if (length(unique(df$DD5)) > 1 & length(unique(df$CMD.adj)) > 1 & length(unique(df$SNR)) > 1 & length(unique(df$Zone)) > 1) {
      return(summary(lm(SI50 ~ DD5 +  rSMR + aSMR + SNR+CMD.adj, data = df)))
    } else {
      return(NULL)  # Skip species with only a single factor value
    }
  })

# Remove NULL values (species where models couldn't be built)
models_list <- Filter(Negate(is.null), models_list)

# View summary for a specific species (Example: "Douglas Fir")
models_list[["Fd"]]

# View the model summary
# Fit the model and get predictions
sibec.lm.test <- sibec.lm %>% 
  group_by(TreeSpp) %>%
  mutate(predicted_SI50 = predict(lm(SI50 ~ DD5 +  rSMR + aSMR + SNR + CMD.adj, data = cur_data())))
sibec.lm.test <- sibec.lm2 %>% filter(TreeSpp == "Bl")
ggplot(sibec.lm.test, aes(x=SI50, y=predicted_SI50, color=TreeSpp)) +
  geom_point(alpha=0.6) +  # Scatter plot of actual vs. predicted
  geom_smooth(method="lm", se=FALSE, color="black") +  # Regression line
  theme_minimal() +
  labs(
    x = "Observed SI50",
    y = "Predicted SI50",
    title = "Linear Regression Predictions for Site Index (SI50) by Tree Species"
  ) +
  facet_wrap(~TreeSpp)  # Separate plots by species
# Replace 1 with the index of the TreeSpp you want to view
```

## flag outliers
```{r}
sibec.lm2 <- sibec.lm %>%
  group_by(TreeSpp) %>%
  mutate(
    model = list(lm(SI50 ~ DD5 + rSMR + aSMR + SNR + CMD.adj, data = cur_data())),
    cooks_distance = cooks.distance(model[[1]]),
    is_outlier = cooks_distance > (4 / n())  # Standard threshold for large influence
  ) %>%
  unnest(c(cooks_distance, is_outlier))

# View flagged outliers
outliers <- sibec.lm2 %>% filter(is_outlier == TRUE) %>% select(PlotNumber, TreeSpp, SI50, cooks_distance, is_outlier)

ggplot(outliers, aes(x = PlotNumber, y = cooks_distance)) +
  geom_point() +
  geom_hline(yintercept = (4 / nrow(sibec.lm2)), color = "red", linetype = "dashed") +
  labs(title = "Cook's Distance for Each PlotNumber",
       x = "PlotNumber",
       y = "Cook's Distance") +
  theme_minimal()
```


```{r}
# Remove outliers from the dataset
sibec.lm3 <- as.data.frame(sibec.lm2) %>% filter(is_outlier == FALSE) 

models_list <- sibec.lm3 %>%
  group_by(TreeSpp, .add=TRUE) %>%
  drop_na() %>%
  group_split(TreeSpp) %>%
  setNames(unique(sibec.lm3$TreeSpp)) %>%
  lapply(function(df) {
    # Check if any predictor has only one unique value
    if (length(unique(df$DD5)) > 1 & length(unique(df$CMD.adj)) > 1 & length(unique(df$SNR)) > 1 & length(unique(df$Zone)) > 1) {
      return(summary(lm(SI50 ~ DD5 +  rSMR + aSMR + SNR+CMD.adj, data = df)))
    } else {
      return(NULL)  # Skip species with only a single factor value
    }
  })

# Remove NULL values (species where models couldn't be built)
models_list <- Filter(Negate(is.null), models_list)

# View summary for a specific species (Example: "Douglas Fir")
models_list[["Ss"]]

sibec.lm3 <- sibec.lm3 %>% 
  group_by(TreeSpp) %>%
  mutate(predicted_SI50 = predict(lm(SI50 ~ DD5 +  rSMR + aSMR + SNR + CMD.adj, data = cur_data())))
ggplot(sibec.lm3, aes(x=SI50, y=predicted_SI50, color=TreeSpp)) +
  geom_point(alpha=0.6) +  # Scatter plot of actual vs. predicted
  geom_smooth(method="lm", se=FALSE, color="black") +  # Regression line
  theme_minimal() +
  labs(
    x = "Observed SI50",
    y = "Predicted SI50",
    title = "Linear Regression Predictions for Site Index (SI50) by Tree Species"
  ) +
  facet_wrap(~TreeSpp)
```
```{r}
library(randomForest)

models_rf <- sibec.lm %>%
  group_by(TreeSpp, .add = TRUE) %>%
  group_split() %>%
  setNames(unique(sibec.lm$TreeSpp)) %>%
  lapply(function(df) {
    if (nrow(df) > 100) {  # Ensure enough samples per species
      randomForest(SI50 ~ DD5 + aSMR + rSMR  + SNR + CMD.adj + BGC + Zone + Latitude, data = df, ntree = 500, importance = TRUE)
    } else {
      return(NULL)  # Skip species with insufficient data
    }
  })

# Remove NULL models
models_rf <- Filter(Negate(is.null), models_rf)

rf_summary <- lapply(models_rf, function(model) {
  if (!is.null(model)) {
    data.frame(
      TreeSpp = deparse(substitute(model)), 
      Variance_Explained = 100 * mean(model$rsq)  # Convert to percentage
    )
  } else {
    NULL
  }
})

# Convert list to a tidy data frame
rf_summary2 <- do.call(rbind, rf_summary) %>% as.data.frame() %>% select(-1) %>% rownames_to_column("TreeSpp")


```

```{r}
library(mgcv)  # For GAM modeling
library(dplyr)
gam_models <- sibec.lm %>%
  group_by(TreeSpp, .add=TRUE) %>%
  group_split() %>%
  setNames(unique(sibec.lm$TreeSpp)) %>%
  lapply(function(df) {
    if (nrow(df) > 10) {  # Ensure enough observations
      gam(SI50 ~ s(DD5) + s(rSMR) + s(aSMR) + s(SNR) + s(CMD.adj), data = df)
    } else {
      return(NULL)  # Skip species with too few samples
    }
  })

# Remove NULL models
gam_models <- Filter(Negate(is.null), gam_models)
# Create a summary table for each TreeSpp model
gam_r2_summary <- lapply(gam_models, function(model) {
  if (!is.null(model)) {
    data.frame(TreeSpp = deparse(substitute(model)), R2 = summary(model)$r.sq)
  } else {
    NULL
  }
})

# Convert list to a tidy data frame
gam_r2_summary <- do.call(rbind, gam_r2_summary) %>% as.data.frame()

# Print the table
print(gam_r2_summary)

```


```{r boxplot SS phases graphs, fig.width = 12, fig.height = 8, fig.cap = "Fig. 1 Site Index by Site Series with phases - removed some outliers for each species in the SBSmc2" }

remove <-c("SBC3727", "SBC3724", "SBC3711", "SBC3712", "SBC3686", "SBC7318", "SBC3109", "SBC3108","SBC3422",
            "SBC6092", "SBC3716", "SBC3714", "SBC6145" ) # these are 12 plots with much higher productivity than the second set (2 phases?)
SI_spp1 <- SI_spp [!(SI_spp$PlotNumber %in% remove), ]
table(SI_spp1[, "SiteSeries"])

SI_spp1$SiteSeries <- as.factor(SI_spp1$SiteSeries)

##box blot of site index by site series for selected zone
#sets order for site series -- need to make this more universal
SI_spp1$SiteSeries <- factor(SI_spp1$SiteSeries, levels = c("02", "03", "01c", "01b", "01a", "01",#
                                                          "04", "05", "06", "09b","09", "09a", #
                                                           "10a","10", "07","10b","12"))# "12a",
#-------Produce boxplot
BGC = "SBSmc2"
SI_box1 <- ggplot(SI_spp1, aes(x=SiteSeries, y=SI_interior, fill=Species)) + 
  geom_boxplot()+
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))+
  ggtitle(paste0 ("Site Index by Site Series phases for the "), BGC)+
  facet_wrap(~Species)
plot(SI_box1)

ggsave("SIxSSphase2_boxplot_SBSmc2ver2.jpg", SI_box1, device="jpeg", path = "./SI_prediction/outputs/")

```

## Generate boxplots of site index by site series without phases
This produces a facetted boxplot graph for each species in a BGC showing site index by site series

```{r boxplot SS graphs, fig.width = 12, fig.height = 8, fig.cap = "Fig. 2 Site Index by Site Series (no phases) for each species in the SBSmc2" }
### remove any phase designations
SI_spp1$SiteSeries <- as.character(SI_spp1$SiteSeries)
SI_spp2 <- SI_spp1 %>% 
      mutate(SiteSeries_rename = ifelse(SiteSeries %in% c('01a', '01b', '01c'), '01', 
                     ifelse(SiteSeries %in% c('09a', '09b'), '09',
                            ifelse (SiteSeries %in% c('10a','10b'), '10', SiteSeries))))
table(SI_spp2[, "SiteSeries_rename"])

#SI_spp2$SiteSeries_rename <- as.factor(SI_spp2$SiteSeries_rename)

##box blot of site index by site series for selected zone
#sets order for site series -- need to make this more universal
SI_spp2$SiteSeries_rename <- factor(SI_spp2$SiteSeries_rename, levels = c("02", "03",  "01",#"01c", "01b", "01a",
                                                          "04", "05", "06", "09", #"09b", "09a",
                                                           "10", "07","12"))#"10a","10b", "12a",
#-------Produce boxplot
BGC = "SBSmc2"
SI_box2 <- ggplot(SI_spp2, aes(x=SiteSeries_rename, y=SI_interior, fill=Species)) + 
  geom_boxplot()+
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))+
  ggtitle(paste0 ("Site Index by Site Series (no phases) for the "), BGC)+
  facet_wrap(~Species)
plot(SI_box2)

ggsave("SIxSS_boxplot_SBSmc2ver2.jpg", SI_box2, device="jpeg", path = "./SI_prediction/outputs/")



```


## Generate boxplots of site index by soil moisture regime
This produces a facetted boxplot graph for each species in a BGC showing site index by site series

```{r boxplot SMR graphs, fig.width = 12, fig.height = 8, fig.cap = "Fig. 3 Site Index by SoilMoisture Regime for each species in the SBSmc2" }
#-------Produce boxplot
table(SI_spp[, "MoistureRegime"])
SI_spp$MoistureRegime <- as.factor(SI_spp$MoistureRegime)
SI_box3 <- ggplot(SI_spp, aes(x=MoistureRegime, y=SI_interior, fill=Species)) + 
  geom_boxplot()+
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))+
  ggtitle(paste0 ("Site Index by SMR for the "), BGC)+
  facet_wrap(~Species)
plot(SI_box3)

ggsave("SIxEdatopeSMR_boxplot_SBSmc2ver2.jpg", SI_box3, device="jpeg", path = "./SI_prediction/outputs/")


```
## Generate Plots by Edatope organized by SMR groups

```{r boxplot edatopicxSMR graphs, fig.width = 12, fig.height = 8, fig.cap = "Fig. 4 Site Index by Edatope-SMR for each species in the SBSmc2" }
#-------Produce boxplot
table(SI_spp[, "edatope"])
SI_spp$edatope <- as.factor(SI_spp$edatope)
SI_box4 <- ggplot(SI_spp, aes(x=edatope, y=SI_interior, fill=Species)) + 
  geom_boxplot()+
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))+
  ggtitle(paste0 ("Site Index by Edatope for the "), BGC)+
  facet_wrap(~Species)
plot(SI_box4)

ggsave("SIxEdatopeSMR_boxplot_SBSmc2ver2.jpg", SI_box4, device="jpeg", path = "./SI_prediction/outputs/")


```

## Generate Plots by Edatope organized by SNR groups
```{r boxplot edatopicxSNR graphs, fig.width = 12, fig.height = 8, fig.cap = "Fig. 5 Site Index by Edatope-SNR for each species in the SBSmc2" }
#-------Produce boxplot
table(SI_tidy[, "edatope2"])
SI_box5 <- ggplot(SI_spp, aes(x=edatope2, y=SI_interior, fill=Species)) + 
  geom_boxplot()+
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))+
  ggtitle(paste0 ("Site Index by Edatope for the "), BGC)+
  facet_wrap(~Species)
plot(SI_box5)

ggsave("SIxEdatopeSNR_boxplot_SBSmc2ver2.jpg", SI_box5, device="jpeg", path = "./SI_prediction/outputs/")

```
